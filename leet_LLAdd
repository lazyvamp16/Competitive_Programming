//  Add Two Numbers

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int carry = 0;
        int sum;
        ListNode* ans = new ListNode();
        ListNode* l3 = ans;
        while (l1 != nullptr && l2 != nullptr) {
            if (l1->val + l2->val + carry >= 10) {
                sum = (l1->val + l2->val + carry) - 10;
                carry = 1;
            } else {
                sum = (l1->val + l2->val + carry);
                carry = 0;
            }
            l1 = l1->next;
            l2 = l2->next;
            l3->next = new ListNode(sum);
            l3 = l3->next;
        }
        while (l1 != nullptr) {
            if (l1->val + carry >= 10) {
                sum = l1->val + carry - 10;
                carry = 1;
            } else {
                sum = l1->val + carry;
                carry = 0;
            }
            l3->next = new ListNode(sum);
            l3 = l3->next;
            l1 = l1->next;
        }
        while (l2 != nullptr) {
            if (l2->val + carry >= 10) {
                sum = l2->val + carry - 10;
                carry = 1;
            } else {
                sum = l2->val + carry;
                carry = 0;
            }
            l3->next = new ListNode(sum);
            l3 = l3->next;
            l2 = l2->next;
        }
        if (carry == 1) {
            l3->next = new ListNode(1);
            l3=l3->next;
        }
        return (ans->next);
    }
};
